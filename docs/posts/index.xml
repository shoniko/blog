<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on Oleksandr Paraska</title>
		<link>https://shoniko.com/posts/</link>
		<description>Recent content in Posts on Oleksandr Paraska</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Thu, 02 Jan 2020 00:00:00 +0000</lastBuildDate>
		<atom:link href="https://shoniko.com/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>Ad blockers, symbolists and connectionists</title>
			<link>https://shoniko.com/posts/post/</link>
			<pubDate>Thu, 02 Jan 2020 00:00:00 +0000</pubDate>
			
			<guid>https://shoniko.com/posts/post/</guid>
			<description>This holiday season there was a decent amount of discussion in the AI community between symbolists and connectionists. It was largely triggered by a debate between Garry Marcus vs Joshua Bengio. The whole debate got me thinking about the differences of the two approaches in relation to ad blocking.
First, some context. Symbolism and connectionism are two different views on AI. Each has its own pros and cons, so one isn&#39;t strictly better than the other.</description>
			<content type="html"><![CDATA[<p>This holiday season there was a decent amount of discussion in the AI community between symbolists and connectionists. It was largely triggered by a debate between Garry Marcus vs Joshua Bengio. The whole debate got me thinking about the differences of the two approaches in relation to ad blocking.</p>
<p>First, some context. Symbolism and connectionism are two different views on AI. Each has its own pros and cons, so one isn't strictly better than the other. It would be useful to understand core differences between the two, to understand my point here. So below I will try to outline how I treat the two terms, and then move on to explaining what this has to do to ad blocking.</p>
<p>Symbolism, unlike the name might suggest, does not have anything to do to a French poet Baudelaire and co, but rather means something more nerdy here. Symbolism was a prominent AI movement in the 80s, 90s, and some 2000s, which operated under assumption that knowledge can be represented using symbols and operations on those symbols. Roughly speaking, a programmer just has to think through the problem and figure out the correct abstractions needed to solve a problem and then treat those abstractions as symbols, defining operations on them. For example, a programmer can define that &ldquo;Zoe is Bob's mother&rdquo;, &ldquo;Joe is Bob's father&rdquo;. With that, such a simple system could then answer a question &ldquo;Who are the parents of Bob?&quot;. It makes sense, it is what I studied as AI at my university and there was some success with it in writing expert systems. However such a system often is very hard to implement, as it is a complicated task to really write rules to most of the things we want to solve with AI. Even in the example above, you might have written a rule in your system like &ldquo;Parents are mother and father of Bob&rdquo;, however in a real world that isn't always what parents are. It gets even harder if you try to describe what makes something a cat or a dog. Gary Marcus famously quotes a research where they have tried to define what a physical container is. That paper is 60 pages long.</p>
<p>Comparing to symbolism, connectionism is a capitulation. It is about admission that there is no way we can define some things with symbols. </p>
]]></content>
		</item>
		
		<item>
			<title>Optimize for happiness</title>
			<link>https://shoniko.com/posts/optimize-for-happiness/</link>
			<pubDate>Sun, 15 Apr 2007 00:00:00 +0000</pubDate>
			
			<guid>https://shoniko.com/posts/optimize-for-happiness/</guid>
			<description>Optimize for happiness  Note: this is a copy of an original post from my Blogspot. It is a very old post, and does not necessary reflect my position now. I just keep it here for future references.
 Recently I came across the idea of happiness optimization. It basicly says something like - do what you like to do - that way the product will be better, and you wil be happier.</description>
			<content type="html"><![CDATA[<h2 id="optimize-for-happiness">Optimize for happiness</h2>
<blockquote>
<p>Note: this is a copy of an original post from my <a href="https://shoniko.blogspot.com/2007/04/optimize-for-happiness.html">Blogspot</a>. It is a very old post, and does not necessary reflect my position now. I just keep it here for future references.</p>
</blockquote>
<p>Recently I came across the idea of happiness optimization. It basicly says something like - do what you like to do - that way the product will be better, and you wil be happier.</p>
<p>I never concidered my self a great programmer. That is true. I never liked programming contests, as I'm not really sure what are those for. I beleive that a good programmer is a happy programmer. And that is it. Which is why I've decided to optimize for happiness.</p>
<p>Maybe I'm too much motivation driven, but I really think that satisfaction from the job is obligatory.</p>
<p>I really think that programmers should have life. If you ever read Douglass Coupland's &ldquo;Microsofters&rdquo; I think you'll know what I mean. By life I mean girlfriend, parties, trips, friends, etc. This is mandatory. Ofcourse there are nightly shifts etc, but programmer is a human beeing, and he/she should be able to have fun. Code shouldn't be the meaning of the life. Life should. I don't see the reason to write a good code by sacrificing even the smallest peace of your own life. Maybe opensource commnity will strongly disagree with me on that :).</p>
<p>I remember some interview with Linus Torwalds, where he was describing his first steps in programming. Oh common - who can think now programming on machine language can be fun? Obviously he can. I remember it was something like: &ldquo;And look, I change this bit - and it moves! wow! cool!&quot;. Didn't we all had a simiar feeling? Don't we all love the possibilities thos machines give us in controlling themselves? Isn't THAT fun? Isn't THAT art or whatever you call it? Isn't THAT why we all are so into it?</p>
<p>One of the reasons I've started programming was to get more into various audio stuff, as I was keen of producing music. And it was really something - to hear those lines of code producing sound. That was my wow. That is my inspiration. I hate working without inspiration and I actually don'r remember if I ever did. I really don't know what was &ldquo;wow&rdquo; for those programmerв who love Database programming - that is like fata morgana to me. Man is that boring?</p>
<p>So this is my current position as to what should the work look like - work should be fun. Otherwise it's not yours and you will do a great favor to yourself and others by turning around and looking for something more suitable for you. I'm pretty sure this will change in future, when I will be a bit older and would like to have a static home and job. Right now that is not for me, so I've decided to quit SoftServe and register as an enterpreneur with a state.</p>
<p>Thanks to all of SoftServe employees for being patient to my weirdness that was bugging them sometimes;).</p>
]]></content>
		</item>
		
	</channel>
</rss>
